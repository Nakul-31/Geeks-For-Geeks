class Solution:
    def ratInMaze(self, maze):
        n = len(maze)
        result = []
        visited = [[0 for _ in range(n)] for _ in range(n)]

        def is_safe(x, y):
            return 0 <= x < n and 0 <= y < n and maze[x][y] == 1 and not visited[x][y]

        def solve(x, y, path):
            if x == n - 1 and y == n - 1:
                result.append(path)
                return
            
            # Mark current cell as visited
            visited[x][y] = 1

            # Explore directions in lexicographic order: D, L, R, U
            if is_safe(x + 1, y):
                solve(x + 1, y, path + 'D')
            if is_safe(x, y - 1):
                solve(x, y - 1, path + 'L')
            if is_safe(x, y + 1):
                solve(x, y + 1, path + 'R')
            if is_safe(x - 1, y):
                solve(x - 1, y, path + 'U')

            # Backtrack
            visited[x][y] = 0

        # Start only if the start and end cells are not blocked
        if maze[0][0] == 1 and maze[n - 1][n - 1] == 1:
            solve(0, 0, "")

        return sorted(result)
