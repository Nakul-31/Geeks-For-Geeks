class Solution:
    def minJumps(self, arr):
        n = len(arr)
        # If first element is 0 and n > 1, we canâ€™t move
        if n <= 1:
            return 0
        if arr[0] == 0:
            return -1
        
        # maxReach -> farthest index we can reach
        # steps -> steps we can still take in current jump
        # jumps -> number of jumps taken
        maxReach = arr[0]
        steps = arr[0]
        jumps = 1

        for i in range(1, n):
            # If we reached the end
            if i == n - 1:
                return jumps
            
            # Update maxReach
            maxReach = max(maxReach, i + arr[i])
            steps -= 1  # using one step to move ahead
            
            # If no steps are left, we must jump
            if steps == 0:
                jumps += 1
                # If we can't move further
                if i >= maxReach:
                    return -1
                # Re-initialize steps for the new jump
                steps = maxReach - i
        
        return -1
